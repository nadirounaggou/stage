---
Resources:
  myVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
  myFirstSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "eu-west-1a"
      CidrBlock: 172.31.0.0/20
      VpcId:
        Ref:  myVPC
  mySecondSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: "eu-west-1b"
      CidrBlock: 172.31.32.0/20
      VpcId:
        Ref:  myVPC
  myRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref:  myVPC
  myInternetGW:
    Type: AWS::EC2::InternetGateway
    Properties:
  myInternetRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId:
        Ref: myRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: myInternetGW
  myFirstSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: myRouteTable
      SubnetId:
        Ref: myFirstSubnet
  mySecondSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId:
        Ref: myRouteTable
      SubnetId:
        Ref: mySecondSubnet
  mySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http and ssh connection
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      VpcId:
        Ref: myVPC
  myLoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http connection
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  myLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      SecurityGroups:
        Ref: myLoadBalancerSG
      Subnets:
        - Ref: myFirstSubnet
        - Ref: mySecondSubnet
  myTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 80
      Protocol: HTTP
      TargetType: instance
      Targets:
        - Id: !Ref myFirstInstance
          Port: 80
        - Id: !Ref mySecondInstance
          Port: 80
  myListner:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn:
        Ref: myLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: myTargetGroup
  myFirstInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SubnetId:
        Ref: myFirstSubnet
      SecurityGroupIds:
        - Ref: mySecurityGroup
      ImageId: "ami-058b1b7fe545997ae"
      UserData:
        Fn::Base64:
          !Sub |
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
  mySecondInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.micro
      SubnetId:
        Ref: mySecondSubnet
      SecurityGroupIds:
        - Ref: mySecurityGroup
      ImageId: "ami-058b1b7fe545997ae"
      UserData:
        Fn::Base64:
          !Sub |
          yum update -y
          yum install -y httpd
          systemctl start httpd
          systemctl enable httpd
          echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
  myAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Ref: myFirstSubnet
        - Ref: mySecondSubnet
      MinSize: '0'
      MaxSize: '3'
      DesiredCapacity: '2'
      InstanceId: !Ref mySecondInstance
      TargetGroupARNs: !Ref myTargetGroup
